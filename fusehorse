#!/usr/bin/tclsh
package require Thread
package require Tclx
package require fuse

proc logmsg {msg} { puts "\[[exec date -R]] $msg" }

proc allexec {dir} {
    set execpaths [list]
    foreach v [glob -nocomplain -directory $dir -type f * .*] {
	if {[file executable $v]} {lappend execpaths $v}}
    set execpaths
}

set execdir [lindex $argv 0]
set execpaths [allexec $execdir]
set basenames [lmap p $execpaths {exec basename $p}]
set inbufs [lrepeat [llength $execpaths] {}]
set outbufs [lrepeat [llength $execpaths] {}]
set last_runner_res {}
set runner_thr [thread::create]
tsv::set shr taskinfo [list]

proc outsizes {} {
    global outbufs
    return [lmap v $outbufs { string length $v }]
}

# I assume path be like '/foo.sh'. It just trims the /
proc v2bname {vname} { return [string range $vname 1 end] }

proc _getattr {context path} {
    global basenames
    if {$path eq "/"} { return [dict create type directory mode 0755 nlinks 2] }
    set bnameidx [lsearch $basenames [v2bname $path]]
    if {$bnameidx ne -1} {
	return [dict create mode 0666 nlinks 1 size [lindex [outsizes] $bnameidx]]
    } else {
        return -code error -errorcode [list POSIX ENOENT {}]
    }
    return ;  # use default stat
}

proc _open {context path fileinfo} {
    global basenames
    if {[lsearch $basenames [v2bname $path]] eq -1} {
        return -code error -errorcode [list POSIX ENOENT {}]
    }
    ## RDWR makes no sense in our design?
    if {"RDWR" in [dict get $fileinfo flags]} {
	puts "Rejected open() because of RDWR request. We only accept RDONLY and WRONLY"
        return -code error -errorcode [list POSIX EACCES {}]
    }

    return ;# must be explicit. if a number is returned, then it becomes the file descriptor.
}

proc _readdir {context path fileinfo} {
    global basenames
    if {$path ne "/"} {
        return -code error -errorcode [list POSIX ENOENT {}]
    }
    return [concat [list "." ".." ] $basenames]
}

proc _read {context path fileinfo size offset} {
    global basenames outbufs
    set bnameidx [lsearch $basenames [v2bname $path]]
    set this_outbuf [lindex $outbufs $bnameidx]

    if {$bnameidx eq -1} {
        return -code error -errorcode [list POSIX ENOENT {}]
    }
    set len [string length $this_outbuf]
    if {$offset < $len} {
        if {$offset + $size > $len} { set size $len }
        return [string range $this_outbuf $offset [expr $offset + $size - 1]]
    }
    return
}

proc _write {context path fileinfo data offset} {
    global basenames outbufs inbufs execpaths last_runner_res runner_thr
    set bnameidx [lsearch $basenames [v2bname $path]]
    set this_inbuf [lindex $inbufs $bnameidx]
    set this_execpath [lindex $execpaths $bnameidx]
    logmsg "_write() called with data length = [string length $data] offset = $offset"
    if {$bnameidx eq -1} {
        return -code error -errorcode [list POSIX ENOENT {}]
    }
    set this_inbuf $this_inbuf$data
    set inlist [split $this_inbuf "\0"]
    if {[llength $inlist] > 1} {
	foreach v [lrange $inlist 0 end-1] {
	    logmsg "Executing $this_execpath"
	    tsv::lappend shr taskinfo [dict create cmd $this_execpath input $v bnameidx $bnameidx]
	    thread::send -async $runner_thr {
		set taskinfo [tsv::lpop shr taskinfo]
		dict create \
		    bnameidx [dict get $taskinfo bnameidx] \
		    result [exec [dict get $taskinfo cmd] << [dict get $taskinfo input]]
	    } last_runner_res
	}
	lset inbufs $bnameidx [lindex $inlist end]
    } else {
	lset inbufs $bnameidx $this_inbuf
    }
    return [string length $data]
}

set mntdir [lindex $argv 1]
fuse create fusehorse -getattr _getattr -readdir _readdir -open _open -read _read -write _write
fusehorse $mntdir -o nonempty -o uid=[id userid] -o gid=[id groupid] -o intr \
    -o intr_signal=2 -o max_read=[expr 1 * 1024 * 1024 * 1024] -o large_read
## use 'rename fusehorse {}' to unmount.

rename exit __shock
proc exit {{status 0}} {
    logmsg "Unmounting FUSE"
    if {[llength [info commands fusehorse]] > 0} {
	rename fusehorse {}
    }
    __shock $status
}
signal trap SIGUSR1 exit
signal trap SIGINT exit
signal trap SIGTERM exit

while 1 {
    vwait last_runner_res
    logmsg "[lindex $execpaths [dict get $last_runner_res bnameidx]] finished. Updating buffer."
    lset outbufs [dict get $last_runner_res bnameidx] [dict get $last_runner_res result]
}

__shock 0
