FUSEhorse: File system that execute programs through IO redection
-----------------------------------------------------------------

FUSEhorse is a user space file system that converts all executable
files in a given directory to virtual files that redirects writes
to the programs stdin. Results of the programs can be read from the
same file after the exit of the program.

What it does:

* Give fusehorse a directory and it will mount a `mirror` of it, in
  which only executable files are present. Subdirectories are ignored.
* When any data are wrote to a virtual file, fusehorse will do nothing
  except saving it to a buffer until it sees a "\0" (NULL byte). A
  NULL byte triggers a program execution, and all data before the
  NULL byte will be input to the programs' stdin. Any subsequent bytes
  will be processed in the same manner, therefore if its input has three
  NULL bytes the program will be executed three times.
* Reading a virtual file always gives the result of the last execution.
  Before the first execution the files are empty.


Requirement
-----------

* tcl >8.5
* tcl-fuse 1.1   (https://sourceforge.net/projects/tcl-fuse/)


Installation
------------

Just put the script into your path


Example
-------

    $ ls srcdir/          # A dir containing source codes
        dummydir/  dummyfile.txt  hello.sh*
    $ cat hello.sh
        #!/bin/sh
	sleep 5
        echo -n "Hello "
        cat </dev/stdin
        echo "\n"
    $ mkdir mnt
    $ fusehorse srcdir mnt  # After this, executables in srcdir will be mapped  to mnt/
    $ ls mnt
        hello.sh          # Only executable files in srcdir/ will show up here

The above mounts a FUSE fs on `mnt/`. Now we can try playing a bit with the 'magic file' mnt/hello.sh.
In another terminal:

    $ echo -ne "horsey\0" >> mnt/hello.sh    # Finishes immediately
    $ cat mnt/hello.sh                       # Empty because the program hasn't exited
    $ cat mnt/hello.sh
    $ cat mnt/hello.sh
    $ cat mnt/hello.sh
        Hello horsey
    $ cat mnt/hello.sh                       # Will be the same forever until you call the program again
        Hello horsey

Note that you have to use `>>` instead of `>`, otherwise you will get error.
This is a design instead of a bug: in the Unix tradition `>>` means simply
appending bytes to a file, and `>` means creating a file and overwrite.
Since files in our virtual directory here are inherently 'streams', so there
are nothing for you to overwrite, thus the `>` operator does not really make sense.


Author
------

Haochi Kiang <hckiang@posteo.se>


License
-------

This software is under GPLv3.
